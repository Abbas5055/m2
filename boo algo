#include <stdio.h>

// Function to convert an integer to its binary string representation
void int_to_binary(int num, char *binary, int bits) {
    for (int i = bits - 1; i >= 0; i--) {
        binary[i] = (num & 1) ? '1' : '0';
        num >>= 1;
    }
    binary[bits] = '\0'; // Null-terminate the string
}

// Function to perform Booth's multiplication algorithm
void booth_multiplication(int m, int r, int *result) {
    int num_bits = sizeof(int) * 8; // Number of bits for the integer
    int m1 = m;
    int r1 = r;
    int r2 = 0; // Initialize the accumulator
    int q1 = 0; // Initialize Q-1 (Q-1 is initially 0)
    int Q = r;  // Initial value of Q (Multiplicand)
    int M = m;  // Initial value of M (Multiplier)

    // Compute the 2's complement of the multiplier if it's negative
    if (M < 0) {
        M = (~(-M) + 1); // Two's complement
    }
    if (Q < 0) {
        Q = (~(-Q) + 1); // Two's complement
    }

    // Booth's algorithm
    for (int i = 0; i < num_bits; i++) {
        int Q0 = Q & 1; // Extract the least significant bit of Q

        // Perform the algorithm steps based on Q0 and Q-1
        if (Q0 == 1 && q1 == 0) {
            r2 = r2 - M; // Subtract M from the accumulator
        } else if (Q0 == 0 && q1 == 1) {
            r2 = r2 + M; // Add M to the accumulator
        }

        // Perform the arithmetic shift right
        q1 = Q0; // Save the least significant bit of Q as Q-1
        Q = (Q >> 1) | ((r2 & 1) << (num_bits - 1)); // Shift Q and include the MSB of R in Q
        r2 = (r2 >> 1); // Shift R right

    }

    // Combine R and Q to get the final result
    *result = (r2 << num_bits) | Q;

    // Handle negative results if the result is in 2's complement
    if (*result & (1 << (num_bits - 1))) {
        *result = ~(*result) + 1; // Convert back from 2's complement to negative value
    }
}

int main() {
    int m = -12;  // Multiplier
    int r = 5;    // Multiplicand
    int result;

    booth_multiplication(m, r, &result);

    printf("Multiplicand: %d\n", r);
    printf("Multiplier: %d\n", m);
    printf("Result: %d\n", result);

    return 0;
}
